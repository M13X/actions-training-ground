name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: events-website
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          # Name that changes when contents of a file change, knowing it has to cache again
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} 
          # Path you want cache
          path: events-website/.npm
      - name: Install dependencies
        run: npm ci
      - name: debug
        run: npm list
      - name: debug2
        run: ls
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.file-name }}
    defaults:
      run:
        working-directory: events-website
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        # Searches for cache, if it doesnt exist, it adds it at the end of the job
        uses: actions/cache@v4
        with:
          # Name that changes when contents of a file change, knowing it has to cache again
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} 
          # Path you want cache
          path: ~/.npm
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'file-name={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # Name of artifact
          name: dist-files
          # Files to be added to artifact
          path: events-website/dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          # Same name as upload artifcats
          name: dist-files
      # Files will be unzipped into root    
      - name: Check output
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
